{"version":3,"sources":["GameUtils.js","redux/store.js","redux/actions.js","components/Game/Game.jsx","components/Grid/Grid.jsx","serviceWorker.js","index.js"],"names":["createNewGrid","initialGrid","grid","i","column","j","push","addTokenToColumn","player","updatedGrid","firstEmptyIndex","indexOf","togglePlayer","initialState","currentPlayer","createStore","state","action","type","payload","newGrid","newPlayer","window","__REDUX_DEVTOOLS_EXTENSION__","Game","className","onClick","this","props","resetGame","React","Component","connect","dispatch","Grid","index","playMove","map","key","handleColumnClick","bind","slot","row","Boolean","location","hostname","match","ReactDOM","render","StrictMode","store","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"iSAQaA,EAAgB,SAACC,GAE5B,IADA,IAAMC,EAAO,GACJC,EAAI,EAAGA,EATK,EASQA,IAAK,CAEhC,IADA,IAAMC,EAAS,GACNC,EAAI,EAAGA,EAZA,EAYUA,IACnBJ,EAGHG,EAAOE,KAAKL,EAAYE,GAAGE,IAF3BD,EAAOE,KATM,SAcjBJ,EAAKI,KAAKF,GAEZ,OAAOF,GAIIK,EAAmB,SAACH,EAAQI,EAAQP,GAC/C,IAAIQ,EAAcT,EAAcC,GAC1BS,EAAkBD,EAAYL,GAAQO,QAtBzB,SA0BnB,OAHID,GAAmB,IACrBD,EAAYL,GAAQM,GAAmBF,GAElCC,GAIIG,EAAe,SAACJ,GAC3B,MAjCsB,aAkCpBA,EAjCoB,wBAkCpBA,EAnCoB,WAEH,SCMRK,EAAe,iBAAO,CACjCX,KAAMF,IACNc,cDVsB,aCqCTC,eAxBQ,WAAuC,IAArCC,EAAoC,uDAA5BH,IAAgBI,EAAY,uCAC3D,OAAQA,EAAOC,MACb,IClBqB,mBDkBJ,IACPd,EAAWa,EAAOE,QAAlBf,OACAU,EAAkBE,EAAlBF,cACFM,EAAUb,EAAkBH,EAAQU,EAAeE,EAAMd,MACzDmB,EAAYT,EAAcI,EAAMF,eACtC,OAAO,eACFE,EADL,CAEEF,cAAeO,EACfnB,KAAMkB,IAGV,ICrBsB,oBDsBpB,OAAOP,IAET,QACE,OAAO,eACFG,MAQTM,OAAOC,8BAAgCD,OAAOC,gC,4BEnCnCC,G,MAAb,uKAEI,OACE,8BACE,8CACA,kBAAC,EAAD,MACA,4BAAQC,UAAU,aAAaC,QAAUC,KAAKC,MAAMC,WAApD,iBANR,GAA0BC,IAAMC,YAgBjBC,cAAS,MAJG,SAAEC,GAAF,MAAiB,CAC1CJ,UAAW,kBAAMI,EDXa,CAC9Bf,KAFwB,0BCeXc,CAAqCR,GChBvCU,G,MAAb,gLAEqBC,GACFR,KAAKC,MAAM1B,KAAMiC,GACrBxB,QJNM,UIMc,GAC7BgB,KAAKC,MAAMQ,SAAUD,KAL3B,+BASY,IAAD,SACyBR,KAAKC,MAA7B1B,EADD,EACCA,KAAMY,EADP,EACOA,cACd,OACE,yBAAKW,UJhBa,aIiBhBX,EAA6B,iBJhBb,aIiBhBA,EAA6B,iBAAmB,QAG9CZ,EAAKmC,KAAI,SAAEjC,EAAQ+B,GAAV,OACP,yBAAKV,UAAU,eAAea,IAAMH,EAAQT,QAAU,EAAKa,kBAAkBC,KAAM,EAAML,IAErF/B,EAAOiC,KAAI,SAAEI,EAAMC,GAAR,OACT,yBAAKJ,IAAMI,EAAMjB,UJzBX,aI0BJgB,EAAoB,uBJzBhB,aI0BJA,EAAoB,uBACpB,2BAxBpB,GAA0BX,IAAMC,YA8CjBC,eATS,SAAEhB,GAAF,MAAc,CACpCd,KAAMc,EAAMd,KACZY,cAAeE,EAAMF,kBAGI,SAAEmB,GAAF,MAAiB,CAC1CG,SAAU,SAAED,GAAF,OAAaF,EFjDY,CACnCf,KAFuB,mBAGvBC,QAAS,CACPf,OE8CwC+B,SAG7BH,CAAgDE,GCzC3CS,QACW,cAA7BrB,OAAOsB,SAASC,UAEe,UAA7BvB,OAAOsB,SAASC,UAEhBvB,OAAOsB,SAASC,SAASC,MACvB,2DCRNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACG,kBAAC,IAAD,CAAUC,MAAOA,GAChB,kBAAC,EAAD,QAGJC,SAASC,eAAe,SDmHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.5db557bc.chunk.js","sourcesContent":["export const ROWS = 6;\nexport const COLUMNS = 7;\n\nexport const PLAYER_1 = 'PLAYER_1';\nexport const PLAYER_2 = 'PLAYER_2';\nexport const EMPTY = 'EMPTY';\n\n// Pure\nexport const createNewGrid = (initialGrid) => {\n  const grid = [];\n  for (let i = 0; i < COLUMNS; i++) {\n    const column = [];\n    for (let j = 0; j < ROWS; j++) {\n      if (!initialGrid) {\n        column.push(EMPTY);\n      } else {\n        column.push(initialGrid[i][j]);\n      }\n    }\n    grid.push(column);\n  }\n  return grid;\n}\n\n// Pure\nexport const addTokenToColumn = (column, player, initialGrid) => {\n  let updatedGrid = createNewGrid(initialGrid);\n  const firstEmptyIndex = updatedGrid[column].indexOf(EMPTY);\n  if (firstEmptyIndex > -1) {\n    updatedGrid[column][firstEmptyIndex] = player;\n  }\n  return updatedGrid;\n}\n\n// Pure\nexport const togglePlayer = (player) => {\n  return (\n    player === PLAYER_1 ? PLAYER_2 : \n    player === PLAYER_2 ? PLAYER_1 :\n    EMPTY\n  );\n}","import { createStore } from 'redux';\n\nimport { RESET_GAME, PLAY_MOVE } from './actions';\n\nimport {\n  PLAYER_1,\n  createNewGrid,\n  addTokenToColumn,\n  togglePlayer\n} from '../GameUtils';\n\nexport const initialState = () => ({\n  grid: createNewGrid(),\n  currentPlayer: PLAYER_1\n})\n\nexport const reducer = ( state = initialState(), action ) => {\n  switch( action.type ) {\n    case PLAY_MOVE: {\n      const { column } = action.payload;\n      const { currentPlayer } = state;\n      const newGrid = addTokenToColumn( column, currentPlayer, state.grid );\n      const newPlayer = togglePlayer( state.currentPlayer );\n      return {\n        ...state,\n        currentPlayer: newPlayer,\n        grid: newGrid\n      };\n    }\n    case RESET_GAME: {\n      return initialState();\n    }\n    default: {\n      return {\n        ...state,\n      };\n    }\n  }\n}\n\nexport default createStore( \n  reducer, \n  window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\n);","export const PLAY_MOVE = '[GAME] Play Move';\nexport const playMove = (column) => ({\n  type: PLAY_MOVE,\n  payload: {\n    column\n  }\n});\n\nexport const RESET_GAME = '[GAME] Reset Game';\nexport const resetGame = () => ({\n  type: RESET_GAME\n});","import React from 'react';\nimport { connect } from 'react-redux';\n\nimport './Game.css';\nimport { resetGame } from '../../redux/actions';\nimport { Grid } from '../../components';\n\nexport class Game extends React.Component {\n  render() {\n    return (\n      <main>\n        <h1>Four in a Row!</h1>\n        <Grid />\n        <button className=\"btn--reset\" onClick={ this.props.resetGame }>New Game</button>\n      </main>\n    )\n  }\n}\n\nconst mapDispatchToProps = ( dispatch ) => ({\n  resetGame: () => dispatch(resetGame())\n})\n\nexport default connect( null, mapDispatchToProps )( Game ); ","import React from 'react';\nimport { connect } from 'react-redux';\n\nimport './Grid.css';\nimport { playMove } from '../../redux/actions';\nimport { PLAYER_1, PLAYER_2 , EMPTY } from '../../GameUtils';\n\nexport class Grid extends React.Component {\n\n  handleColumnClick( index ) {\n    const column = this.props.grid[ index ];\n    if (column.indexOf( EMPTY ) > -1) {\n      this.props.playMove( index );\n    }\n  }\n\n  render() {\n    const { grid, currentPlayer } = this.props;\n    return (\n      <div className={( \n        currentPlayer === PLAYER_1 ? 'grid--player-1' : \n        currentPlayer === PLAYER_2 ? 'grid--player-2' : 'grid'\n      )}>\n        {\n          grid.map(( column, index ) => (\n            <div className='grid__column' key={ index } onClick={ this.handleColumnClick.bind( this, index ) }>\n              {\n                column.map(( slot, row ) => (\n                  <div key={ row } className={\n                    slot === PLAYER_1 ? 'grid__slot--player-1' : \n                    slot === PLAYER_2 ? 'grid__slot--player-2' : \n                    'grid__slot'\n                  }></div>\n                ))\n              }\n            </div>\n          ))\n        }\n      </div>\n    )\n  }\n\n}\n\nconst mapStateToProps = ( state ) => ({\n  grid: state.grid,\n  currentPlayer: state.currentPlayer\n});\n\nconst mapDispatchToProps = ( dispatch ) => ({\n  playMove: ( index ) => dispatch( playMove(index ) )\n});\n\nexport default connect( mapStateToProps, mapDispatchToProps )( Grid );","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\nimport { Provider } from 'react-redux'\nimport store from './redux/store'\n\nimport { Game } from './components/';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n     <Provider store={store}>\n      <Game />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}